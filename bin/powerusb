#!/usr/bin/python
#
# Manage PowerUSB power strips:
#  http://pwrusb.com
#
# Author: Mark Lamourine <markllama@gmail.com>
# 
# Copyright 2013
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys
import argparse
import re
import lxml.etree as etree

from powerusb import *

"""
pwrusb --list-strips

pwrusb --strip <id> [on|off|reset|status|current|power|clear]

pwrusb --socket <id> [[--default] [(on|off)]]

"""


def parse_arguments():
    parser = argparse.ArgumentParser(
        description="Manage PowerUSB power strips")

    parser.add_argument("--config-file", default="~/.powerusbrc")

    target = parser.add_mutually_exclusive_group()

    target.add_argument("--list-strips", action="store_true")
    target.add_argument("--strip", default=None, dest="strip")
    target.add_argument("--socket", default=None)

    format = parser.add_mutually_exclusive_group()
    format.add_argument("--format", choices=['json', 'text', 'xml'], 
                        default="text")
    format.add_argument("--json", const="json",
                        action="store_const", dest="format")
    format.add_argument("--text", const="text",
                        action="store_const", dest="format")
    format.add_argument("--xml", const="xml",
                        action="store_const", dest="format")

    parser.add_argument("--default", action="store_true")
    parser.add_argument("action", nargs="?", choices=['on', 'off'])

    return parser.parse_args()

def find_strip(bus, device):
    for strip in PowerUSBStrip.strips():
        if strip.busnum == bus and strip.devnum == device:
            return strip

    return None

bus_re = re.compile("(\d+):(\d+)(:(\d+))?")

def parse_socket(socket_string):
    
    m = bus_re.match(socket_string)
    if m == None:
        raise ValueError("invalid bus/socket string: %s" % socket_string)

    # return the bus and device number.  Socket number is optional
    return (int(m.group(1)), int(m.group(2)), m.group(4) and int(m.group(4)))

if __name__ == "__main__":

    opt = parse_arguments()
    
    if len(sys.argv) == 1 or opt.list_strips:
        if opt.format == "text":
            for strip in PowerUSBStrip.strips():
                strip.open()
                print strip
                strip.close()
        elif opt.format == "xml":
            estrips = etree.Element("powerstrips")
            doc = etree.ElementTree(element=estrips)
            for strip in PowerUSBStrip.strips():
                strip.open()
                estrips.append(strip.etree())
                strip.close()
            print etree.tostring(doc, pretty_print=True)

    elif opt.strip != None:
        print "query or set power strip %s" % opt.strip

        # find the strip object
        strip_id = parse_socket(opt.strip)
        print "strip_id = %s" % str(strip_id[0:2])

        strip = find_strip(strip_id[0], strip_id[1])
        if strip == None:
            print("no such strip device: %s" % opt.strip)
            exit(1)

        if opt.action == None:
            """status"""

        elif opt.action in ['on', 'off']:
            """turn power on or off"""

    elif opt.socket != None:
        print "query or set power socket %s" % opt.socket

        socket_id = parse_socket(opt.socket)
        print "socket_id = %s" % str(socket_id)

        strip = find_strip(socket_id[0], socket_id[1])
        if strip == None:
            print("no such strip device: %s" % opt.socket)
            exit(1)

        # find the strip object

        if opt.action == None:
            """Status"""
	    strip.open()
            print "strip %d:%d socket %d: %s" % \
	       tuple(socket_id + (strip.socket[int(socket_id[2])].power,))
            strip.close()

        elif opt.action in ['on', 'off']:
            """ turn the socket on or off"""
            print "turn strip %d:%d socket %d %s " % tuple(socket_id + (opt.action,))

